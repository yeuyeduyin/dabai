为什么要给表加上主键？

为什么加索引后会使查询变快？

为什么加索引后会使写入、修改、删除变慢？

什么情况下要同时在两个字段上建索引？

    表如果不加主键则是一个无须表格存储方式，加上主键则是一个b-tree的存储方式，整个表变成了一个索引（也叫聚集索引根节点是主键值，叶子节点是存放的行），主键的作用就是把表的数据格式转换成平衡树的格式存放。
    每一个索引字段相当于是一个b-tree，查询的时候先找到对于字段的值然后通过它找到对应的主键，然后就能找到具体的数据聚集索引（主键）是通往真实数据所在的唯一路径。
    加索引后做增删改操作会破坏当前的索引b-tree结构，需要从新梳理树的结构确保它的正确性。
    同时两个以上字段建索引，叫覆盖索引也叫复合索引，（只有查询条件有第一个索引才能生效）如果多个索引那么叶子节点是包含了主键和索引字段对应的真实值，有可能就不用去查询聚集索引了，1.多字段主键的时候 默认会创建多字段索引2.当你的搜索条件是 多字段同时的（例如:select * from a where id = 3 and year=2010）当这样的查询多次出现的时候 你就应该考虑 index(id,year)
注意：要将最常用的那个字段放最前面 比如你经常还要单独查询year（select * from a where year>=2001）
这个时候你就要 这么建 index(year,id)