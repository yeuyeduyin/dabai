mybatis可以通过XML或注解方式灵活配置要运行的sql语句，并将java对象和sql语句映射生成最终执行的sql，最后将sql执行的结果再映射生成java对象。 

1.MyBatis编程步骤是什么样的？
① 创建SqlSessionFactory 
② 通过SqlSessionFactory创建SqlSession 
③ 通过sqlsession执行数据库操作 
④ 调用session.commit()提交事务 
⑤ 调用session.close()关闭会话

2.#{}和${}的区别是什么？

#{}是预编译处理，${}是字符串替换。
Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；
Mybatis在处理${}时，就是把${}替换成变量的值。
使用#{}可以有效的防止SQL注入，提高系统安全性。

3、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？
第1种： 通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。 
第2种： 通过<resultMap>来映射字段名和实体类属性名的一一对应的关系。

4.如何执行批量插入?
// 注意这里 executortype.batch 
 @Autowired
 private SqlSessionTemplate sqlSessionTemplate;

    SqlSession sqlsession = sqlSessionTemplate.SqlSessionFactory().opensession(executortype.batch); 
    
    try { 
     PlanManagementMapper mapper=sqlsession.getMapper(PlanManagementMapper .class);//获取对应dao的接口 
     for (string name : names) { 
     mapper.insertname(name); 
     } 
     sqlsession.commit(); 
    } finally { 
     sqlsession.close(); 
    }

Mybatis内置的ExecutorType有3种(SIMPLE, REUSE, BATCH)，默认的是simple，该模式下它为每个语句的执行创建一个新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句，并且批量执行所有更新语句，显然batch性能将更优； 但batch模式也有自己的问题，比如在Insert操作时，在事务没有提交之前，是没有办法获取到自增的id，这在某型情形下是不符合业务要求的

5.在mapper中如何传递多个参数?
第1种：对应的xml,#{0}代表接收的是dao层中的第一个参数，#{1}代表dao层中第二参数，更多参数一致往后加即可。
第2种：使用 @param 注解: 