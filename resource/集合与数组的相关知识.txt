List 元素是有序的、可重复

ArrayList：线程不安全，但速度快，底层数据结构是数组结构。

	  初始默认大小为10 每次扩容为之前的1.5倍，

	  扩容增量：原容量的 0.5倍+1

　　　　　如 ArrayList的容量为10，一次扩容后是容量为16

Vector：线程安全，但速度慢，底层数据结构是数组结构。

	  加载因子为1：即当元素个数超过容量长度时，进行扩容，

	  扩容增量：原容量的 2倍，

	  如 Vector的容量为10，一次扩容后是容量为20。


Set(集) 元素无序的、不可重复。

HashSet：线程不安全，存取速度快

　　　　　底层实现是一个HashMap（保存数据），实现Set接口

　　　　　默认初始容量为16（为何是16，见下方对HashMap的描述）

　　　　　加载因子为0.75：即当 元素个数 超过 容量长度的0.75倍 时，进行扩容

　　　　　扩容增量：原容量的 2倍

　　　　　如 HashSet的容量为16，一次扩容后是容量为32


Map是一个双列集合

如果HashMap的键(key)是自定义的对象，那么需要按规则定义它的equals()和hashCode()方法。

HashMap：默认初始容量为16

　　　　（为何是16：16是2^4，可以提高查询效率，另外，32=16<<1-->index = HashCode（Key） & （Length - 1）计算当前key值放入哪个位置。相对平均）

　　　　　加载因子为0.75：即当 元素个数 超过 容量长度的0.75倍 时，进行扩容

　　　　　扩容增量：原容量的 2倍

　　　　　如 HashSet的容量为16，一次扩容后是容量为32

HashTable：默认初始容量为11

	  加载因子为0.75：即当 元素个数 超过 容量长度的0.75倍 时，进行扩容

计算扩容边界值的方式是：threshold = (int) Math.min(initialCapacity * loadFactor, MAXIMUM_CAPACITY + 1);取最小值



